Loops
Loops allow us to repeat a process over and over again until a condition is met.

For Loop
Syntax:
'''
for item in items:
    print(item)
'''

break;
Stops a loop when a condition is met

continue;
Skips to the next value in the loop

range()
Use range function when you want to loop over an iterable a number of times

Nested For Loops
This is where we have a for loop inside of another or several other for loops.
This is also looping through a loop


''''''''''''''''''''''''''''

items = (2, 4, 6, 8, 10, 12)

# Break keyword in for loops
print('Break keyword in for loops')
for item in items:
    if item == 8:
        #print('Found 8')
        break
    print(item)


# Continue keyword in for loops
print('Continue keyword in for loops')
for item in items:
    if item == 8:
        #print('Found 8')
        continue
    print(item)



# Range function in for loops
print('Range function in for loops')
for item in range(11):
    print(item)


# Nested Loop
print('Nested Loop')
letters = "abcdef"
for item in items:  # outer loop
    for letter in letters:  # inner loop
        print(item, letter)


# Looping Throug a Tuple
print('Looping through a tuple')
my_tuple = ('a', 'b', 'c', 'd')

for letter in my_tuple:
    print(letter)

''''''''''''''''''''''''''''''''

Looping through a Dictionary
print('Looping Through a Dictionary')
my_dict = {
    'name': 'Dede',
    'age': 22,
    'work': 'Sleeper',
    'energy level': 43
}

for key, value in my_dict.items():
    print(key, value)

print(my_dict.items())

for key in my_dict.keys():
    print(key)

for value in my_dict.values():
    print(value)