Python is a high-level programming language that has a syntax similar to english language.
It is beginner friendly and versatile.
Can be used for:
1. Web dev
2. Desktop application
3. Machine learning
4. Scripting
5. Data Science and Analytics

type 'python3' to enter the python interpreter in the terminal
To exit the interpreter, type'exit()' or use 'Ctrl + D'

Install pep8

Data Types
    String
    Integer
    Float 
    Boolean
    Object

Functions
print() - print to the console
len() - print the length or total number of characters of a variable
type() - prints the data type of a value or variable: str, int, float ...
dir() - function used to print all the methods available to a datatype
Numeric Functions
    abs() - changes negatives values into positive values
    round() - rounds a float to the nearest whole number. 
    It can take two arguments, the value and how many decimal places you want the function to round up to.
Type Casting
There are two ways of changing the data type of a value.
Implicit and Explicit Conversions

- Implicit conversion is when the pyhton interpreter automatically does the type conversion for us.
Adding an integer and a floating point number is possible because of implicit type conversion.

- Explicit type conversion is when we convert the type ourselves using the functions below.
    int() - for explicit conversion of a value to an integer data type
    str() -  for explicit conversion of a value to a string data type
    float() - for explicit conversion of a value to a float data type


String Methods
.lower() - changes all letters to lower case
.upper() - changes all letters to upper case
.count() - count the number of occurences of the argument passed
.find() - used to find the starting index of the argument passed
.join() - used to join strings by a delimeter from a list into one string
.strip() - gets rid of surrounding spaces of a string to both sides
.lstrip() - gets rid of surrounding spaces of a string to the left
.rstrip() - gets rid of surrounding spaces of a string to the right
.endswith() - used to check if a substring or a string ends with the argument that is passed
.isnumeric() - used to check if a string is a numeric value or not. 
 Method can check if a string is composed of only numbers. 
 If the string contains only numbers, this method will return True
.split() - This is used to split a string into a list of strings or substrings. Can take an argument, a delimeter to split strings by.
.isalpha() - Returns True if there are only letters in the string. If not, returns False.


Indexing
- Counting by positional index

String Concatenation
name = "Manny"
number = len(name) * 3
print("Hello {}, your lucky number is {}".format(name, number))

price = 7.5
with_tax = price * 1.09
print(price, with_tax)
print("Base price: ${:.2f}. With Tax: ${:.2f}".format(price, with_tax))



Numerical Data
- integers
- floats
Arithmetic
- "-"
- "+"
- "/" - divides a numerator by a denomenator
- "%" - returns the remainder of a division
- "*"
- abs() - changes negatives values into positive 

Lists
Lists are data types that stores values in an array, enclosed by a square bracket.
eg: Names = ["Nana", "Afua", "Antwiwaa", "Conduah"]
List Methods
    .append() - used to add something at the end of the list
    .insert() - adds an item to a list in a specific location. 
    It takes two arguments, the index and the new item.
    .remove() - it removes an item from the list
    .pop() - removes very last item from a list but can also remove an item whose index is specified
    .reverse() - reverse a list and sets its first index from the last to the first
    .sorted() - used to arrange or sort a list of numbersor ascending and descending order takes arg "reverse=True/false"
    .sort() - used to arrange a list in alphabetical values or strings, takes arg "reverse=True/false"
    Note there is .sort() and sorted()
    .extend() - adds a list to another list
List Functions
    min() - returns the minimum number in a list
    max() - return the maximum number in a list
    sum() - returns the sum of all the numbers in a list


Tuples
A python datatype that are similar to lists but are enclosed with the curved brackets '()'
They are immutable and hence its content cannot be mmodified, unlike lists which are mutable.
So if you want to change the contents use a list instead.
They don't have as many methods a lists do.

Tuple Methods and functions

number_tuple = (1, 5, 3, 8, 5)

len()  eg: len(number_tuple)
.index()  eg: number_tuple.index(5)
count()  eg: number_tuple.count(5)


Sets 
Sets are values that are unordered and they have no duplicates. They are notified or enclosed in curly braces.
eg: my_set = {'Grace, 'Naomi', 'Emefa', 'Priscilla', 'Jennifer'}
Sets don't care about the order of things amd are mostly used to remove duplicates
They are used to check the membership of values eg: print('Grace' in my_set) // Should return True


Methods
.intersection() - Intersection bring common values in two sets
.union() - used to combine two sets but does not duplicate any value
.difference() - prints out the values in one set that are not in the other set
.add() - adds a new value to a set

Creating an empty list, tuple and set
initialize the variable containing the list, tuple or set as an empty 
square bracket, curved bracket and curly bracket respectively.
Example:
my_list = []
my_tuple = ()
my_set = set{} // if you don't include the set keyword you will be creating a dictionary which
is another datatype

Convert a list to a set
numbers = [1, 5, 3, 8, 8, 5]

unique_numbers = set(numbers)
new_list = list(unique_numbers)
print(new_list)

Python has a help function 'help()', that helps us to remember or check the definition of some methods