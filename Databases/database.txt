DATABASES

A Database is a structured or unstructured collection of data that the backend 
server uses to store and manage informatio efficiently
A  database can be accessed by the backend code to retrieve, update, delete data

Importance of Databases in backend development
1. To store data persistently even after the application closes or the server restarts
2. To organize and manage data for easy access  
3. To handle large amount of data that cannot fit in memory
4. To allow multiple users to access the same data simultaneously

Databases are very important for frontend and backend development in web architecture
There are 2 types of DBMS
1. Relational
They handle databases by storing them in tables
The columns in the table has fields
They are relatively harder to learn as compared to non-relational databases
    i. MySQL
    ii. PostgreSqL
    iii. SQLite

2. Non-Relational DBMS
Data is stored as documents, key-value pairs or graphs
They are recommended or used for large unstructured data that cannot fit in tables
    i. MongoDB
    ii. CassandraDB
    iii. Redis


MySQL
It is a query language
We are using local SQL
Syntax

    Creating a database
    ```bash
    CREATE DATABASE database_name;
    eg:
    CREATE DATABASE tech4girls;

    Output:
    Query OK, 1 row affected (0.03 sec)
    ```

    Showing a database
    ```bash
    SHOW DATABASES;

    Output:
    mysql> SHOW DATABASES;
    +--------------------+
    | Database           |
    +--------------------+
    | information_schema |
    | mysql              |
    | performance_schema |
    | sys                |
    | tech4girls         |
    +--------------------+
    5 rows in set (0.04 sec)

    ```

    Using a Database
    ```bash
    USE tech4girls;

    Output:
    Database changed
    ```

    Interracting with SQL server using Scripts
    SQL Scripting

    Deleting a database
    ```bash
    DROP DATABASE tech4girls;
    ```


    Making sql script executable
    run this after chmod +x test.sql
    ```bash
    mysql -u root -p < test.sql
    ```

-- Creatig a Database
CREATE DATABASE IF NOT EXISTS tech4girls;   -- Use this instead when creating a Database
Using IF in SQL

SQL executes from the top
A database of everyone in class


DATA TYPES IN SQL
1. VARCHAR(256) -- takes in an argument of a specific number which is how long it can be

2. INT -- Used to store positive and negative whole numbers

3. FLOAT -- Used for numbers with fractional part

4. DATE 

5. BOOLEAN -- For True or False Values

CONSTRAINTS
Used to set limitations and restictions applied to a specific column 
to make sure wrong data is not inserted in the table

1. NOT NULL
This makes sure column value in every row is not empty or blank

2. UNIQUE
Column values in every row is unique

3. PRIMARY KEY
A combination of the UNIQUE and NOT NULL constraints 
They are usually set to be IDs since they are mostly unique 
For every table there must be only one property set as PRIMARY key

4. FOREIGN KEY
Used to form relationships between tables
It helps to create parent child relationships between tables

5. AUTO_INCREMENT
This increments any column value automatically




Creating tables
``bash
CREATE TABLE IF NOT EXISTS backend_class(
    student_id INT PRIMARY KEY AUTO_INCREMENT,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(256) NOT NULL,
    age INT NOT NULL,
    email VARCHAR(256) UNIQUE NOT NULL,
);

```

Showing a table
```bash
SHOW TABLES;
```

PREVILEGES
They are permissions granted to users or roles that define what actions they can perform 
on databases, tables or other objects in a Database Management System.

TYPES OF PREVILEGES
- Object Level Priviledge
    SELECT
    INSERT 
    UPDATE
    
- Database Level Priviledge
    CREATE
    DROP
    ALL - For granting all priviledges 

- Administrative Level Priviledge
    GRANT   ------------- SHOW GRANTS FOR 'root'@'localhost'; ---------
    RELOAD
    SUPER

ROOT USER (DEFAULT USER)
Has all priviledges. Meaning they have the power to control all SQL.
- Reading, writing, modifying or managing the database itself

-- CREATING A USER IN SQL --
```bash
CREATE USER IF NOT EXISTS 'username'@'localhost' IDENTIFIED BY 'password'
```

-- ENTERING MYSQL INTERPRETER AS A NEW USER, NOT ROOT --
```bash
rhodalee@Rhoda-Lee:~/HACSA_LESSONS$ mysql -u rhodalee -p
```

-- GRANTING PRIVILEDGES --
SYNTAX:
```bash
GRANT privilege_type ON database.table_name TO 'username'@'localhost';
```
This is done or granted by the root user.

-- GRANTING PRIVILEDGES --
```bash
GRANT privilege_type ON database.table_name TO 'username'@'localhost';
```
-- USAGE
```bash
GRANT SELECT ON tech4girl.backend_class TO 'rhodalee'@'localhost';
```

-- GRANTING A PRIVILEGE ON ALL DATABASES THE ROOT USER OWNS TO ANOTHER USER
```bash
GRANT privilege_type ON *.* TO 'username'@'localhost';
```
-- USAGE
```bash
GRANT INSERT, UPDATE, SELECT ON *.* TO 'rhodalee'@'localhost';
```

-- REMOVING PRIVELEGES FROM USERS
```bash
REVOKE privilege_type ON database.table_name FROM 'username'@'localhost';
```
-- USAGE
```bash
REVOKE INSERT ON tech4girls.backend_class FROM 'rhodalee'@'localhost';
```

-- REMOVING A PRIVILEGE ON ALL DATABASES THE ROOT USER GAVE TO ANOTHER USER
```bash
REVOKE privilege_type ON *.* FROM 'username'@'localhost';
```
-- USAGE
```bash
REVOKE INSERT, UPDATE, SELECT ON *.* FROM 'rhodalee'@'localhost';
```

-- MAKING ONE A ROOT USER, GIVE ALL PRIVILEGES
```bash
GRANT ALL PRIVILEGES ON *.* TO 'rhodalee'@'localhost';
```

-- REVOKING ALL PRIVILEGES FROM A USER
```bash
REVOKE ALL PRIVILEGES ON *.* FROM 'rhodalee'@'localhost';
```

                     --------- RELATIONSHIPS IN SQL -------------
All types of datbases have relationships.
Relationships define how tables are connected.
They ensure proper structuring or Relational Databases and data consistency.
There are 3 types of relationships:

ONE-TO-ONE RELATIONSHIP (1 ---> 1 )
Each row in Table A is linked exactly to one(1) row in Table B
    Eg: Users having one profile and each profile belonging to one user
    They are linked together by a user ID

    Eg: Each student uses one laptop and each laptop is used by one user


ONE-TO-MANY RELATIONSHIP (1 ---> *(Many))
A row in table A can be related to many rows in Table B but 
one row in Table B can only relate to one row intable A.
    Eg: Customers can place many orders but one order is linked to one customer.

MANY-MANY RELATIONSHIP (*(Many) ---> *(Many))
----- Research on Many-To-Many Relationships


SQLAlchemy is a python library used to interact with relational databases
It provides a low level library for executing raw SQL
It also provides an object relational mapper (ORM):
    This is a high level abstraction that allows you to interact with 
    databases using python classes and objects
    It allows you to interact with sql using python code, so you don't need to write queries
    In ORM, class maps to a table in sql

In SQLAlchemy, tables are models
Benefits of SQLAlchemy:
    1. Avoid writing raw sql queries repeatedly
    2. It improves maintanance and readability of code
    3. Switching between databases like SQLite and PostgreSQL is easier

    INSTALLATION
    sudo apt install python3-venv

    python3 -m venv ~/myenv

    source ~/myenv/bin/activate

    pip install mysql-connector-python

    pip install sqlalchemy

# Low level libraries in SQLAlchemy
```bash
    from sqlalchemy import create_engine #to connect our database to sqlalchemy
```
# It acts as a bridge between our pyhton app and database 
It informs sqlalchemy how to connect to our database, the type of database including, 
location of database, credentials needed to access the database

mysqlconnector is the help sqlalchemy needs to establish a connection
```bash 
    connection_str = 'mysql+mysqlconnector://username:password@localhost/database_name'
```

CRUD
C - CREATE can mean INSERT in sql
R - READ can mean SELECT
U - UPDATE can mean UPDATE in sql
D - DELETE can mean DELETE in sql

Sessionmaker helps us to perform CRUD operations
It helps us to create a configured session class




from sqlalchemy import create_engine #to connect our database to sqlalchemy
# it acts as a bridge between our pyhton appp and database informs sqlalchemy how to connect to our database including, location of database, credentials needed to access the database
# High level library
from sqlalchemy.orm import sessionmaker
# Session is a workspace where we can do operations like add, update, delete
from dotenv import load_dotenv
import os

# Load environment variables from the .env file
load_dotenv()

# Access the environment variables
database_username = os.getenv("DB_USERNAME")
database_password = os.getenv("DB_PASSWORD")
database_name = os.getenv('DB_NAME')

#print(database_username, database_password, database_name)

connection_str = f'mysql+mysqlconnector://{database_username}:{database_password}@localhost/{database_name}'

-- Creating models in sqlalchemy

Relationships in SQLAlchemy
Specifies the attributes on the related class that handles the reverse side of the relationship



API (Application Programming Interface)
A way for two softwares or systems to communicate
If you build an API you just built a backend server
It helps to build functionalities within the programming language to send request

You send a requestto a backend and get a response back 
It is the intermediary between the database and the backend

Taping an API send a request
The python or js application serves as a client
The response comes in a JSON format
JSON - JavaScript Object Notation

Benefits:
Use predefined function instead of building from scrath


APIs are important because:
They expose particular resources not all resources
They help different systems work together


An endpoint is a single entry pont in an api that perforns a particular action or provides a particular resource
It is where the client sends its request in order to interact with the server
It is done by the backend developers

The frontend would have to specify the endpoint in order to access the backend
/backend_class/students
/backend_class/students/1

URI
First thing we have is https://domain(localhost):port/file_path
This is how an endpoin looks like: https://127.0.0.1:3000//backend_class/students
domain name is where the server is located, the address


Rules to building a RESTful API:
REST: Representational State Transfer
It is a set of guidlines for building APIs
Common guidlines:

1. Client server separation
The server will handle data storage and business logic
The client handles the user Interface
The server can work independently
What is done in the backend should not change or affct the frontend 
so long as the client is not consuming from the server

2. Stateless communication:
Every API request from the client must contain all needed informationn the server needs to process it 
The server does not store client specific data between requests.
After responding to every request, the server must forget the data of the past client request.

3. Uniform Interface:
The API should follow a consistent and predictable design making it easier for clients to use and understand.
Naming API Endpoints should be as consistent as posible
Example:
/backend_class/all_students -- for all students
/backend_class/all_students/1 -- specific student by their ID

4. Layers System
API architecture should allow intermediate layers example load balancers 
between the client and server without affectiong communication
API should not be affected if there is a load balancer in the architecture




